<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nicholsonjf.com</title><link href="http://nicholsonjf.com/" rel="alternate"></link><link href="http://nicholsonjf.com/feeds/all.atom.xml" rel="self"></link><id>http://nicholsonjf.com/</id><updated>2014-01-22T00:00:00-08:00</updated><entry><title>Guido van Rossum on Tulip (asynchronous I/O for Python 3)</title><link href="http://nicholsonjf.com/blog/guido-on-tulip" rel="alternate"></link><updated>2014-01-22T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2014-01-22:blog/guido-on-tulip</id><summary type="html">&lt;iframe width="560" height="315" src="//www.youtube.com/embed/c7D63mqCs5Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;On Thursday, January 23rd at 7:30pm the creator and BDFL of Python &lt;a href="http://en.wikipedia.org/wiki/Guido_van_Rossum" title="Guido's Wiki"&gt;Guido van Rossum&lt;/a&gt; will give a talk at LinkedIn, Mountain View about &lt;a href="http://code.google.com/p/tulip/" title="Tulip on Google Code"&gt;Tulip (asynchronous I/O for Python 3.3+)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll be there, running a &lt;a href="http://www.google.com/+/learnmore/hangouts/onair.html" title="Google Hangouts on Air Official Page"&gt;Google Hangout on Air&lt;/a&gt; which I have embedded above. My goal is for people to be able to visit this page during the talk and watch the broadcast live, as well as view it after the fact like a normal embedded YouTube video.&lt;/p&gt;
&lt;p&gt;If for any reason the video above is not working, try &lt;a href="http://www.ustream.tv/linkedin-events" title="LinkedIn live broadcast"&gt;LinkedIn's live broadcast&lt;/a&gt;. Also, a recording of the talk will be posted a day or two later on the &lt;a href="http://www.youtube.com/channel/UCBJV1sd5XcVhijm13pWfBCg" title="BayPiggies Youtube channel"&gt;BayPiggies Youtube channel&lt;/a&gt;.&lt;/p&gt;</summary><category term="Python"></category><category term="BayPiggies"></category><category term="Guido"></category><category term="Tulip"></category></entry><entry><title>Return a List of Every Entry in Websters 1913 Dictionary with One Python Regex</title><link href="http://nicholsonjf.com/blog/one-regex" rel="alternate"></link><updated>2014-01-15T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2014-01-15:blog/one-regex</id><summary type="html">&lt;p&gt;First, you'll need to visit &lt;a href="http://www.gutenberg.org/ebooks/29765" title="Webster's 1913 dictionary on Project Gutenberg"&gt;http://www.gutenberg.org/ebooks/29765&lt;/a&gt; and download the 'Plain Text UTF-8' file. This is the 1913 edition of Webster's Unabridged Dictionary, as a 27.6 MB text file. Save this as 'dictionary.txt'.&lt;/p&gt;
&lt;p&gt;Next, create your python script in the same directory you saved your text file. I called mine 'search.py'.&lt;/p&gt;
&lt;p&gt;Start your script by importing Python's regular expression module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, open your 'dictionary.txt' file and initialize it as a file object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dictionary.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, convert the text file into a string and store it in a variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dictionary.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dicstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our next variable will store the regex itself, which I'll explain in detail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dictionary.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dicstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;(?&amp;lt;=\r\n\r\n)[A-Z]+(?![a-z])(?=\r\n)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;re.compile&lt;/code&gt; part allows us to store a regex in a variable, so we can use it later if need be. The function takes a string as an arguement for the regular expression. The &lt;code&gt;r&lt;/code&gt; before the regex string tells python to interpret the quoted text as a &lt;a href="http://docs.python.org/2/reference/lexical_analysis.html#string-literals" title="Python string literals"&gt;raw string&lt;/a&gt; and avoids the &lt;a href="http://docs.python.org/2/howto/regex.html#the-backslash-plague" title="Python regex backslash plague"&gt;backslash plague&lt;/a&gt; in Python's re module. The &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; section is a &lt;a href="http://docs.python.org/2/library/re.html#regular-expression-syntax" title="Python regex syntax"&gt;positive lookbehind assertion&lt;/a&gt; and tells the regex engine to only match a string if it is preceded by &lt;code&gt;...&lt;/code&gt;. Our lookbehind assertion is &lt;code&gt;\r\n\r\n&lt;/code&gt; because every entry in our dictionary file is preceded by this string. The next chunk is our actual matching pattern, &lt;code&gt;[A-Z]+&lt;/code&gt;. This bit says, match one or more continuous uppercase letters (preceded by &lt;code&gt;\r\n&lt;/code&gt; because of the lookbehind assertion). The next part &lt;code&gt;(?!...)&lt;/code&gt; is a negative lookahead assertion, and tells python to only return a match if the pattern is NOT followed by &lt;code&gt;...&lt;/code&gt;, which for us is &lt;code&gt;[a-z]&lt;/code&gt; or any lowercase letter. The negative lookahead assertion is required because there are certain title case words (i.e 'Help') at the end of the text file that were matching. The regular expression ends with a positive lookahead assertion, &lt;code&gt;(?=...)&lt;/code&gt; that tells Python to match only if the pattern IS followed by &lt;code&gt;...&lt;/code&gt;, in our case &lt;code&gt;\r\n&lt;/code&gt; (all dictionary entries in the text file are followed by this string).&lt;/p&gt;
&lt;p&gt;To actually run our compiled regular expression against the dictionary stored as a string, we'll use the re.findall function and store the result in the variable &lt;code&gt;entries&lt;/code&gt;. As you can see below, re.finall(expression, string) takes two arguments, the first being the compiled regular expression and the second being the string to match against.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dictionary.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dicstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;(?&amp;lt;=\r\n\r\n)[A-Z]+(?![a-z])(?=\r\n)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dicstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below is the entire script, along with some commented out code that can be uncommented to print various other interesting things to the console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dictionary.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dicstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;(?&amp;lt;=\r\n\r\n)[A-Z]+(?![a-z])(?=\r\n)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;[A-Za-z]+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# This regex will match (approximately) all&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;
    &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dicstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;##Uncomment the below line to see the actual string (with &amp;#39;\r\n&amp;#39; etc.)&lt;/span&gt;
    &lt;span class="c"&gt;#print repr(dicstring)&lt;/span&gt;
    &lt;span class="c"&gt;##Uncomment the below line to print the number of words matched&lt;/span&gt;
    &lt;span class="c"&gt;#print len(entries)&lt;/span&gt;
    &lt;span class="c"&gt;##Uncomment the below line to print your list of dictionary entries&lt;/span&gt;
    &lt;span class="c"&gt;#print entries&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category><category term="Regex"></category></entry><entry><title>BayPiggies Meeting, December 2013</title><link href="http://nicholsonjf.com/blog/baypiggies-december2013" rel="alternate"></link><updated>2014-01-01T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2014-01-01:blog/baypiggies-december2013</id><summary type="html">&lt;p&gt;I attended and filmed the speaker at the December &lt;a href="http://piggies.net/" title="BayPiggies website"&gt;BayPiggies&lt;/a&gt; meeting at LinkedIn. The speaker was &lt;a href="http://www.learningtech.org/company/staff.shtml" title="Learningtech.org staff page"&gt;Peter Farrell&lt;/a&gt;, a mathmatics teacher at a company called &lt;a href="http://www.learningtech.org/" title="Learningtech.org homepage"&gt;learningtech.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all it was a very interesting talk, showcasing a cool use-case of Python in an educational setting. For another really interesting watch, check out &lt;a href="http://youtu.be/Sg5glDFjWNg" title="Peter Farrell YouTube video about modeling eliptical orbits"&gt;Peter's YouTube video about modeling eliptical orbits with visual python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/HfvQ6O7Di0g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Python"></category><category term="BayPiggies"></category></entry><entry><title>Tips-n-Tricks</title><link href="http://nicholsonjf.com/blog/tips-n-tricks" rel="alternate"></link><updated>2014-01-01T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2014-01-01:blog/tips-n-tricks</id><summary type="html">&lt;p&gt;This is a temporary post I'm using to document short snippets of code and commands I want to remember. Eventually I'm going to build a separate page into nicholsonjf.com where I can upload and display these in a cleaner and more accessible manner. Until then, this is &lt;a href="http://nicholsonjf.com/blog/good-enough" title="Good-Enough blog post"&gt;good enough!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Create a local git repo and push it to Github&lt;/h3&gt;
&lt;p&gt;Date: 2014-01-03&lt;br /&gt;
Tags: ubuntu, git, github&lt;br /&gt;
Sources: &lt;a href="http://stackoverflow.com/questions/11276364/after-creating-a-local-git-repo-how-do-i-push-it-on-github" title="Stack overflow question"&gt;stack overflow post&lt;/a&gt;, &lt;a href="https://help.github.com/articles/create-a-repo" title="Github create repo"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://help.github.com/articles/create-a-repo" title="Github create repo"&gt;create the repo on Github&lt;/a&gt;. Make sure to initialize it with a README file.&lt;/p&gt;
&lt;p&gt;Then, &lt;code&gt;cd&lt;/code&gt; into the local directory you want to push.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt; to initialize the local repo.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add -A&lt;/code&gt; to track all files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit -m "commit note"&lt;/code&gt; to commit the changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add origin git remote add origin https://github.com/username/repo-name.git&lt;/code&gt; to add the Github repo as a remote.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt; this will pull down the README file from Github and prevent a fastforward error when you push.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt; enter your username and password to github. The github repo should now be caught up with your local repo.&lt;/p&gt;
&lt;h3&gt;Check if package is installed&lt;/h3&gt;
&lt;p&gt;Date: 2014-01-01&lt;br /&gt;
Tags: ubuntu, bash&lt;br /&gt;
Sources: &lt;a href="http://askubuntu.com/questions/140569/how-to-test-if-package-is-installed" title="Ask ubuntu post"&gt;ask ubuntu post&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Bash command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dpkg-query -l &lt;span class="o"&gt;[&lt;/span&gt;package-name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nicholsonjf@1z4u:~&lt;span class="nv"&gt;$ &lt;/span&gt;dpkg-query -l curl
&lt;span class="nv"&gt;Desired&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Unknown/Install/Remove/Purge/Hold
| &lt;span class="nv"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?&lt;span class="o"&gt;=(&lt;/span&gt;none&lt;span class="o"&gt;)&lt;/span&gt;/Reinst-required &lt;span class="o"&gt;(&lt;/span&gt;Status,Err: &lt;span class="nv"&gt;uppercase&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bad&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt;/ Name                         Version                      Description
+++-&lt;span class="o"&gt;============================&lt;/span&gt;-&lt;span class="o"&gt;============================&lt;/span&gt;-&lt;span class="o"&gt;========================================================================&lt;/span&gt;
ii  curl                         7.22.0-3ubuntu4.6            Get a file from an HTTP, HTTPS or FTP server
&lt;/pre&gt;&lt;/div&gt;</summary><category term="howto"></category></entry><entry><title>The Big-O</title><link href="http://nicholsonjf.com/blog/The-Big-O" rel="alternate"></link><updated>2013-12-14T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2013-12-14:blog/The-Big-O</id><summary type="html">&lt;p&gt;On November 21st I filmed a &lt;a href="http://baypiggies.net" title="BayPiggies Python Interest Group"&gt;BayPiggies&lt;/a&gt; talk about &lt;a href="http://en.wikipedia.org/wiki/Big_O_notation" title="Big O Wikipedia article"&gt;Big-O Notation&lt;/a&gt; given by Jeremy Holman, a software engineer at Shuterfly. The entire talk can be viewed in the embedded YouTube video below. While you're at it, subscribe to our channel too!&lt;/p&gt;
&lt;p&gt;For a junior developer (like me), it was difficult to make the connection between theory and application. Here's what algorithm analysis means to me: given two different solutions (with identical outputs) to a single problem, whichever one consumes the least resources (money, time, memory, storage, processes) is the one I will choose.&lt;/p&gt;
&lt;p&gt;Jeremy was a good speaker with a lot of energy and clearly knows his stuff. In fact, he knows his stuff so well that his explanation of Big-O Notation and how to use it was too high-level for me. So I took to Google in hope of finding some kind of layman's walk-through. Wikipedia does a great job at providing details about instances of concepts we already understand. For example, if you understand what the President of the United States is, Wikipedia is hard to top when it comes to summarizing the life of &lt;a href="http://en.wikipedia.org/wiki/Andrew_Jackson" title="Andrew Jackson Wikipedia article"&gt;Andrew Jackson&lt;/a&gt;. But if you don't know what a country is or how the U.S. Government works, the article on Jackson will be of little value to you.&lt;/p&gt;
&lt;p&gt;Jeremy's talk and the Wikipedia article on Big-O are great resources to those with an advanced understanding of computer science and math, but they weren't doing it for me. What I needed was something targeted at people with only a modest understanding of computer science, like say,  an article written for high school informatics competitors in Greece. Turns out &lt;a href="http://en.wikipedia.org/wiki/User:Dionyziz" title="Dionyziz Wikipedia article"&gt;Dionysis Zindros&lt;/a&gt;, a software engineer at Twitter wrote just that. &lt;a href="http://discrete.gr/complexity/" title="A Gentle Introduction to Algorithm Complexity Analysis"&gt;A Gentle Introduction to Algorithm Complexity Analysis&lt;/a&gt; is extremely well written, and is great at delivering a practical understanding of Big-O and how/when to use it.&lt;/p&gt;
&lt;p&gt;If you have any comments or questions related to your experience learning or using Big-O, please leave them below!&lt;/p&gt;
&lt;p&gt;Also, today is my brother Christopher's birthday! Send him a Big-O birthday tweet at &lt;a href="https://twitter.com/chrisFnicholson" title="Christopher Nicholson's twitter page"&gt;@chrisFnicholson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/1xCSqMbxd_k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Python"></category><category term="BayPiggies"></category><category term="big-O"></category></entry><entry><title>Install Python 3.3.2 locally from Source (Ubuntu 12.04.3 LTS)</title><link href="http://nicholsonjf.com/blog/install-python3-locally-from-source" rel="alternate"></link><updated>2013-11-11T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2013-11-11:blog/install-python3-locally-from-source</id><summary type="html">&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I rely heavily on the vast amount of how-to guides on the internet. With enough time, curiousity and determination, you can pretty much learn anything you want right from your computer. So, I feel it's my duty as a citizen of the internet to contribute to that body of resources. Also, documenting the way I setup or created something helps me remember it better in the future. &lt;/p&gt;
&lt;h3&gt;Props&lt;/h3&gt;
&lt;p&gt;Most of what I use below I learned from reading the answer frm &lt;a href="http://askubuntu.com/users/14564/sergey"&gt;@sergey&lt;/a&gt; on &lt;a href="http://askubuntu.com/questions/244544/how-to-install-python-3-3"&gt;this askubuntu post&lt;/a&gt;. Like I said earlier, I make good use of resources around the internet :)&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;*Disclaimer*&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I am not a veteran linux sys-admin and have only tested this on my personal server at home. Make sure to test this on a dev machine before trying on any machine of importance.&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;For the past six months or so, I've been immersing myself in Python, and have happily used &lt;a href="http://docs.python.org/2/"&gt;2.7&lt;/a&gt;, the version that comes along with OS X 10.8.5 and Ubuntu 12.04. Recently though, I got a hankering for trying out the latest 3-series version which is &lt;a href="http://docs.python.org/3.3/"&gt;3.3&lt;/a&gt;. I'm particulary finicky about setting up projects on my home server and use &lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; as much as possible. So I decided, if I wanted to install a different version than the system uses, I wasn't going to do it globally. Also, since Python 3.3.2 was only released in May 2013, there isn't a pre-packaged binary available from Ubuntu/Canonical yet. Thus, I was left to compiling and installing it manually.    &lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;Before compiling from source, we'll need to download the C compiler. Also, SQLite (if you want your Python install to have it) and the bzip2 data compressor. I chose to install these globally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt; 
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bzip2&lt;/span&gt; &lt;span class="n"&gt;libbz2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Downloading the Source Tarball&lt;/h3&gt;
&lt;p&gt;Before doing anything, we need to download the file. To do so, we can use &lt;code&gt;wget&lt;/code&gt; and point it to &lt;a href="http://www.python.org/ftp/python/"&gt;Python's FTP server&lt;/a&gt;. As I mentioned earlier, my aim was to install it in a local user directory, not globally, so I first created the folder where I wanted it to live. Replace &lt;code&gt;nicholsonjf&lt;/code&gt; with the name of your ubuntu user account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nicholsonjf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &lt;code&gt;wget -4&lt;/code&gt; will force the use of IPV4 (initially it tried using IPV6 and was timing out).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nicholsonjf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;
&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//python.org/ftp/python/3.3.2/Python-3.3.2.tar.bz2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, run the below command to extract the .bz2 file that we downloaded above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;jxf&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.3.2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that's finished, &lt;code&gt;cd&lt;/code&gt; into the directory that was created from unpacking the tarball.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.3.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This next step is important. Since we want to install Python3 into a user directory, we run the configure script with the &lt;code&gt;--prefix&lt;/code&gt; switch, and specify where we want the software to be installed. Again, remember to replace &lt;code&gt;nicholsonjf&lt;/code&gt; with your username. You can run &lt;code&gt;./configure --help&lt;/code&gt; if you want to see the other options that are available.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nicholsonjf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a ton of output to the terminal saying "checking this" and "checking that". Once that is done, it's compile time. Run the below command and let it do it's thing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, a finishing touch from our good friend &lt;a href="http://askubuntu.com/users/14564/sergey"&gt;@sergey&lt;/a&gt; that uses a symbolic link to the Python 3.3 executable, allowing one simply type &lt;code&gt;python3&lt;/code&gt; into the terminal and the Python 3.3.2 interperter will launch. Remember to replace &lt;code&gt;nicholsonjf&lt;/code&gt; with your username.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nicholsonjf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you should be able to enter &lt;code&gt;python3&lt;/code&gt; into the terminal and see the below prompt show up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.3.2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nov&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6.3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for reading! If you have any questions, don't hesitate to leave a comment!&lt;/p&gt;</summary><category term="Python"></category><category term="Ubuntu"></category></entry><entry><title>Good Enough is good enough!</title><link href="http://nicholsonjf.com/blog/good-enough" rel="alternate"></link><updated>2013-11-05T00:00:00-08:00</updated><author><name>James Nicholson</name></author><id>tag:nicholsonjf.com,2013-11-05:blog/good-enough</id><summary type="html">&lt;p&gt;Last month I signed up as a volunteer videographer for one of my favorite local software communities, &lt;a href="http://baypiggies.net" title="BayPiggies Python Interest Group"&gt;BayPiggies&lt;/a&gt; (Bay Area Python Interest Group). As a relatively new programmer, I've been looking for ways to get involved with an open-source project. Shooting some video once a month seemed like something I could handle.&lt;/p&gt;
&lt;p&gt;The typical format of a BayPiggies meeting is: announcements, introduce speaker, listen to speaker, Q&amp;amp;A. The first meeting I recorded on Thursday October 24th was no different. The speaker was &lt;a href="http://en.wikipedia.org/wiki/Alex_Martelli" title="Alex Martelli's Wikipedia page"&gt;Alex Martelli&lt;/a&gt;, who is an "Uber Technical Lead" at Google and &lt;a href="http://stackoverflow.com/users/95810/alex-martelli" title="Alex Martelli's Stack Overflow Profile"&gt;epic contributor on Stack Overflow&lt;/a&gt;. He gave a really interesting talk about our obsession with perfection as a society and how that doesn't really work well with software development in general.&lt;/p&gt;
&lt;p&gt;You can watch the entire talk on youtube, &lt;a href="http://youtu.be/GcdcLoEJleI" title="Link to Alex Martelli talk on Youtube"&gt;here&lt;/a&gt;. A quote from the BayPiggies teaser for Alex's talk describes what I believe to be the key takeaway: "keep the software simple, just "good enough", launch it early, and iteratively improve, enhance, and re-factor it. This is how software success is achieved!&lt;/p&gt;</summary><category term="Python"></category><category term="BayPiggies"></category></entry></feed>